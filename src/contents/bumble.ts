import { sendToBackgroundViaRelay } from '@plasmohq/messaging';
import type { PlasmoCSConfig } from 'plasmo';
import type { BumbleProfile } from '~src/misc/bumbleTypes';
import { debug } from '~src/misc/config';

/**
 * Execute the script on the tinder website,
 * Running in 'main' world, which means it has access to the DOM
 */
export const config: PlasmoCSConfig = {
  matches: ['*://*.bumble.com/*'],
  run_at: 'document_idle',
  world: 'MAIN',
};

const handleImageUpload = async (data: string) => {
  try {
    // the data is a stringified JSON object, the BumbleProfile interface is autogenerated from the JSON
    const response: BumbleProfile = JSON.parse(data);
    // find the first body that has a client_upload_photo property
    const fileUpload = response.body.find((b) => b.client_upload_photo);

    if (!fileUpload) {
      console.log('No file upload found');
      return;
    }

    const photo = fileUpload?.client_upload_photo.photo;

    if (!photo) {
      console.log('No photo found');
      return;
    }

    // here is the actual ID of the photo
    const id = parseInt(photo.id, 10);
    // let's pseudo-anonymize it as we don't need a precise ID
    const pseudoAnonId = id - 10 + Math.floor((Math.random() * 20) + 1);

    if (debug) console.log(`Pseudo-anonymised ID: ${pseudoAnonId}, Original ID: ${id}`);

    await sendToBackgroundViaRelay({
      name: 'bumbleID',
      body: {
        id: pseudoAnonId,
      },
    });
  } catch (err) {
    console.error(err);
  }
};

const replaceWindowXMLHttpRequest = () => {
  class Interceptor extends XMLHttpRequest {
    url: string = '';

    open(method: string, url: string | URL) {
      this.url = typeof url === 'string' ? url : url.toString();
      super.open(method, url);
    }

    send(d) {
      // When the state changes
      this.addEventListener('readystatechange', () => {
        // if there's been a photo upload...
        if (this.readyState === 4 && this.url.includes('SERVER_UPLOAD_PHOTO')) {
          handleImageUpload(this.responseText);
        }
      });
      super.send(d);
    }
  }

  // Replace default XMLHttpRequest with custom class
  window.XMLHttpRequest = Interceptor;
};

replaceWindowXMLHttpRequest();
